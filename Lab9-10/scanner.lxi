%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>

    int currentLine = 1;
%}

%option noyywrap
%option caseless

DIGIT [0-9]
NON_ZERO_DIGIT [1-9]
NUMBER_CONST [+-]?{NON_ZERO_DIGIT}{DIGIT}*|0
LETTER [a-zA-Z]
IDENTIFIER {LETTER}({LETTER}|{DIGIT}|_)*
CHAR_CONST [\']({LETTER}|{DIGIT})[\']
STRING_CONST ("\"({LETTER}|{DIGIT})*\"")

%%

"binary"|"func"|"when"|"is"|"truth"|"contrarily"|"give-back"|"as long as"|"fur"|"times"|"increase"|"word"|"engrave"|"dump"|"cap"|"nr" {printf("%s - reserved word\n", yytext);}

"+"|"-"|"*"|"/"|"%"|"&"|"&&"|"<"|">"|"<="|"=="|">="|"!="|"=" printf("%s - operator\n", yytext);

{IDENTIFIER} {printf("%s - identifier\n", yytext);}

{NUMBER_CONST} {printf("%s - integer constant\n", yytext);}

{CHAR_CONST} {printf("%s - character constant\n", yytext);}

{STRING_CONST} {printf("%s - string constant\n", yytext);}

"["|"]"|"("|")"|"{"|"}"|":"|";"|"." printf("%s - separator\n", yytext);

[ \t]+ {}

[\n]+ {++currentLine;}

. {printf("Error at token %s at line %d\n", yytext, currentLine); exit(1);}

%%

int main(int argc, char** argv) {
    if (argc > 1) {
        FILE *file = fopen(argv[1], "r");
        if (!file) {
            fprintf(stderr, "Could not open %s\n", argv[1]);
            exit(1);
        }
        yyin = file;
    } else {
        yyin = stdin;
    }
    yylex();
    return 0;
}
